[tool.poetry]
name = "Sekoia.io Automation Module to work with Cato Networks"
version = "1.0.0"
description = ""
authors = []
package-mode = false

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
orjson = "^3.10.18"
python-dateutil = "^2.9.0.post0"
sekoia-automation-sdk = {extras = ["all"], version = "^1.18.3"}
aiohttp = "^3.12.8"
loguru = "^0.7.3"
async-lru = "^2.0.2"
aiolimiter = "^1.2.1"
cashews = "^7.4.0"

[tool.poetry.dev-dependencies]
pytest = "*"
pytest-cov = "*"
pytest-asyncio = "*"
pytest-xdist = "*"
pytest-env = "*"
pytest-flake8 = "*"
Faker = "^13.12.0"
autoflake = "^1.4"
isort = "^5.10.1"
black = { version = "^24.10.0", extras = ["colorama"] }
mypy = "^0.991"
types-python-dateutil = "^2.8.19.13"
aioresponses = "^0.7.4"
poethepoet = { version = "^0.16.5", extras = ["poetry_plugin"] }
poetry = "^1.5.1"

[tool.black]
line-length = 119
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 119

[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_return_any = true
exclude = ["tests/*"]

[tool.coverage.run]
omit = [
    "cato/metrics.py",
]

[tool.pytest.ini_options]
minversion = "6.0"
asyncio_default_fixture_loop_scope = "session"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]
addopts = '''
  --strict-markers
  --tb=short
  --cov=connectors
  --cov-branch
  --cache-clear
  --cov-report=html
  --cov-report=term-missing:skip-covered
  --cov-fail-under=5
  --numprocesses=auto
  --asyncio-mode=auto
'''

[tool.poe.tasks.lint]
sequence = [
    { cmd = "poetry run autoflake --in-place --remove-all-unused-imports --remove-duplicate-keys --remove-unused-variables */**/*.py" },
    { cmd = "poetry run black ." },
    { cmd = "poetry run isort ." },
    { cmd = "poetry run mypy ." },
]
help = "Make code linting and formatting."
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
