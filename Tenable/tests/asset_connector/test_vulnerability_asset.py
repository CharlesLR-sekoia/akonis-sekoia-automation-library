import pytest
from unittest.mock import MagicMock, patch, Mock

from tenable_conn.asset_connector.vulnerability_asset import TenableAssetConnector, VulnerabilityState, VulnerabilitySeverity
from tenable_conn import TenableModule

@pytest.fixture
def tenable_asset_connector(symphony_storage):
    module = TenableModule()
    module.configuration = {
        "base_url": "https://example.com",
        "access_token": "fake_tenable_access_token",
        "secret_key": "fake_tenable_secret_key"
    }

    test_tenable_asset_connector = TenableAssetConnector(module=module, data_path=symphony_storage)
    test_tenable_asset_connector.configuration = {
        "sekoia_base_url": "https://sekoia.io",
        "sekoia_api_key": "fake_api_key",
        "frequency": 60,
    }

    test_tenable_asset_connector.log = Mock()
    test_tenable_asset_connector.log_exception = Mock()

    yield test_tenable_asset_connector

def test_states_property(tenable_asset_connector):
    expected = [state.value for state in VulnerabilityState]
    assert tenable_asset_connector.states == expected

def test_severities_property(tenable_asset_connector):
    expected = [severity.value for severity in VulnerabilitySeverity]
    assert tenable_asset_connector.severities == expected

def test_extract_timestamp(tenable_asset_connector):
    vuln = {"first_found": "2024-06-01T12:00:00Z"}
    ts = tenable_asset_connector.extract_timestamp(vuln)
    assert isinstance(ts, int)
    assert ts == 1717243200

def test_handle_activity(tenable_asset_connector):
    assert tenable_asset_connector.handle_activity("OPEN") == (1, "Create")
    assert tenable_asset_connector.handle_activity("FIXED") == (3, "Close")
    assert tenable_asset_connector.handle_activity("UNKNOWN") is None

@patch("tenable_conn.asset_connector.vulnerability_asset.TenableAssetConnector._get_asset_info")
def test_map_vulnerability_fields(mock_get_asset_info, tenable_asset_connector):
    vuln = {
        "state": "OPEN",
        "finding_id": "123",
        "first_found": "2024-06-01T12:00:00Z",
        "plugin": {
            "type": "test_type",
            "name": "Test Plugin",
            "description": "Test Description",
            "first_found": "2024-06-01T12:00:00",
            "last_found": "2024-06-02T12:00:00",
            "cve": ["CVE-1234"],
            "see_also": ["https://ref.com"]
        }
    }
    asset_info = {"uuid": "asset-uuid"}
    result = tenable_asset_connector.map_vulnerability_fields(vuln, asset_info)
    assert result.activity_id == 1
    assert result.finding_info.uid == "123"
    assert result.vulnerabilities.cve.uid == "CVE-1234"